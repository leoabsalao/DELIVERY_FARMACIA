unit UViaCEP;

interface
uses
  IdTCPConnection, IdTCPClient, IdHTTP, IdSSLOpenSSL, System.json, System.SysUtils,
  IPPeerClient, REST.Client, Vcl.Dialogs, Vcl.StdCtrls, FireDAC.Comp.Client, System.Classes;
type
  TViaCEP = class
  private
    RespCode: Integer;
    Logradouro, Complemento, Bairro, Localidade, UF, IBGE, Gia, Unidade : String;
    procedure BuscarCep(pCep: String);
    function  DadosCEP(vCEP: string): TStringList;
    procedure LerJson(pJson: String);
  public
    function GetRespCode: Integer;
    function GetLogradouro : String;
    function GetComplemento : String;
    function GetBairro : String;
    function GetLocalidade : String;
    function GetUF : String;
    function GetIBGE : String;
    function GetGia : String;
    function GetUnidade : String;
    function FormatCEPNumero(NumCEP : string):string;
    constructor Create(pCEP : String);
  end;

implementation

{ TAPIViacep }

procedure TViaCEP.BuscarCep(pCep: String);
var
  IdHTTP: TIdHTTP;
  LHandler: TIdSSLIOHandlerSocketOpenSSL;
  Json: String;
  URL : String;
begin
  IdHTTP := TIdHTTP.Create();
  LHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  pCep := FormatCEPNumero(pCep);
  try
    try
      IdHttp.IOHandler := LHandler;
      URL := 'https://viacep.com.br/ws/' + pCep + '/json/';
      Json := IdHTTP.Get(URL);
      RespCode := IdHTTP.ResponseCode;
    except
      RespCode := IdHTTP.ResponseCode;
      exit;
    end;
  finally
    FreeAndNil(LHandler);
    FreeAndNil(IdHTTP);
  end;
  LerJson(Json);
end;

constructor TViaCEP.Create(pCEP: String);
begin
  BuscarCep(pCEP);
end;

function TViaCEP.DadosCEP(vCEP: string): TStringList;
var
  data: TJSONObject;
  RESTClient1: TRESTClient;
  RESTRequest1: TRESTRequest;
  RESTResponse1: TRESTResponse;
  Endereco: TStringList;
begin
  RESTClient1 := TRESTClient.Create(nil);
  RESTRequest1 := TRESTRequest.Create(nil);
  RESTResponse1 := TRESTResponse.Create(nil);
  RESTRequest1.Client := RESTClient1;
  RESTRequest1.Response := RESTResponse1;
  RESTClient1.BaseURL := 'https://viacep.com.br/ws/' + vCEP + '/json';
  RESTRequest1.Execute;
  data := RESTResponse1.JSONValue as TJSONObject;
  try
    Endereco := TStringList.Create;
    if Assigned(data) then
    begin
        try
          Endereco.Add(data.Values['logradouro'].Value);
        except
          on Exception do
            Endereco.Add('');
        end;
        try
          Endereco.Add(data.Values['bairro'].Value);
        except
         on Exception do
           Endereco.Add('');
        end;
        try
          Endereco.Add(data.Values['uf'].Value);
        except
         on Exception do
           Endereco.Add('');
        end;
        try
          Endereco.Add(data.Values['localidade'].Value);
        except
         on Exception do
           Endereco.Add('');
        end;
        try
          Endereco.Add(data.Values['complemento'].Value);
        except
         on Exception do
           Endereco.Add('');
        end;
      end;
  finally
    FreeAndNil(data);
  end;
  Result := Endereco;
end;

function TViaCEP.FormatCEPNumero(NumCEP: string): string;
var
  CEP_Formatado: string;
begin
  CEP_Formatado := NumCEP;
  CEP_Formatado := StringReplace(CEP_Formatado, '.', '', [rfReplaceAll]);
  CEP_Formatado := StringReplace(CEP_Formatado, '-', '', [rfReplaceAll]);
  Result := CEP_Formatado;
end;

function TViaCEP.GetBairro: String;
begin
  Result := Bairro;
end;

function TViaCEP.GetComplemento: String;
begin
 Result := Complemento;
end;

function TViaCEP.GetGia: String;
begin
  Result := Gia;
end;

function TViaCEP.GetIBGE: String;
begin
  Result := IBGE;
end;

function TViaCEP.GetLocalidade: String;
begin
  Result := Localidade;
end;

function TViaCEP.GetLogradouro: String;
begin
  Result := Logradouro;
end;

function TViaCEP.GetRespCode: Integer;
begin
  Result := RespCode;
end;

function TViaCEP.GetUF: String;
begin
   Result := UF;
end;

function TViaCEP.GetUnidade: String;
begin
  Result := Unidade;
end;

procedure TViaCEP.LerJson(pJson: String);
var
  umJSONObject : TJSONObject;
begin
  try
    umJSONObject:= TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(pJson), 0) as TJSONObject;
    Logradouro  := umJSONObject.Get('logradouro').JsonValue.Value;
    Bairro      := umJSONObject.Get('bairro').JsonValue.Value;
    Localidade  := umJSONObject.Get('localidade').JsonValue.Value;
    Complemento := umJSONObject.Get('complemento').JsonValue.Value;
    Unidade     := umJSONObject.Get('unidade').JsonValue.Value;
    IBGE        := umJSONObject.Get('ibge').JsonValue.Value;
    UF          := umJSONObject.Get('uf').JsonValue.Value;
    Gia         := umJSONObject.Get('gia').JsonValue.Value;
  finally
    FreeAndNil(umJSONObject);
  end;
end;

end.
